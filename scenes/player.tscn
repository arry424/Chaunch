[gd_scene load_steps=5 format=3 uid="uid://cdt2hutstrwhb"]

[ext_resource type="PackedScene" uid="uid://dh3c8ksu4np6l" path="res://scenes/chain.tscn" id="2_s6sna"]

[sub_resource type="GDScript" id="GDScript_dmc6a"]
script/source = "extends CharacterBody3D

@export var max_hp = 50
var hp = max_hp
var is_player_one = true

@export var move_left = \"move_left\"
@export var move_right = \"move_right\"
@export var move_forward = \"move_forward\"
@export var move_back = \"move_back\"
@export var sprint = \"sprint\"
@export var jump = \"jump\"


const SPEED = 5.0
const JUMP_VELOCITY = 4.5

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")
#@onready var camera = $Camera3D

var look_dir: Vector2
var camera_sens = 50

var is_sprinting = false

func _ready():
	#if !is_player_one:
		#set_collision_layer_value(1, false)
		#set_collision_layer_value(2, true)
	pass

func _physics_process(delta):
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle jump.
	if Input.is_action_just_pressed(jump) and is_on_floor():
		velocity.y = JUMP_VELOCITY
	

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector(move_left, move_right, move_forward, move_back)
	var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)
	if is_sprinting:
		velocity.x = velocity.x * 2
		velocity.z = velocity.z * 2
	_rotate_camera(delta)
	move_and_slide()
	
	
func _input(event: InputEvent):
	if event is InputEventMouseMotion: look_dir = event.relative * 0.01
	
func _rotate_camera(delta: float, sens_mod: float = 1.0):
	#var input = Input.get_vector(\"look_left\",\"look_right\",\"look_up\",\"look_down\")
	#look_dir += input
	rotation.y -= look_dir.x * camera_sens * delta
	#print(rotation.y)
	#camera.rotation.x = clamp(camera.rotation.x - look_dir.y * camera_sens * sens_mod* delta, -90, 90)
	look_dir = Vector2.ZERO
	
func _process(delta):
	if Input.is_action_just_pressed(sprint):
		is_sprinting = true
	if Input.is_action_just_released(sprint):
		is_sprinting = false
		

"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_w3mry"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_kaoky"]

[node name="Player" type="CharacterBody3D"]
collision_mask = 195
script = SubResource("GDScript_dmc6a")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_w3mry")

[node name="Chain" parent="." instance=ExtResource("2_s6sna")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0)

[node name="CollisionShape3D" parent="Chain" index="0"]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0, 0)

[node name="MeshInstance3D" parent="Chain" index="1"]
transform = Transform3D(0.73, 0, 0, 0, 0.73, 0, 0, 0, 0.73, 0, 0, 0)

[node name="RayCast3D" parent="Chain" index="3"]
transform = Transform3D(-1, 8.74228e-08, 3.82137e-15, 0, -4.37114e-08, 1, 8.74228e-08, 1, 4.37114e-08, -0.00178552, 0, 0.258471)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("CapsuleMesh_kaoky")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.924699, 0.380699, 0, -0.380699, 0.924699, 0.132298, 1.98414, 3.17343)
current = true

[editable path="Chain"]
